<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DeExtensions</name>
    </assembly>
    <members>
        <member name="M:DG.DeExtensions.ColorExtensions.ToHex(UnityEngine.Color32,System.Boolean)">
            <summary>
            Returns a HEX version of the given Unity Color, without the initial #
            </summary>
            <param name="includeAlpha">If TRUE, also converts the alpha value and returns a hex of 8 characters,
            otherwise doesn't and returns a hex of 6 characters</param>
        </member>
        <member name="M:DG.DeExtensions.ColorExtensions.ToHex(UnityEngine.Color,System.Boolean)">
            <summary>
            Returns a HEX version of the given Unity Color, without the initial #
            </summary>
            <param name="includeAlpha">If TRUE, also converts the alpha value and returns a hex of 8 characters,
            otherwise doesn't and returns a hex of 6 characters</param>
        </member>
        <member name="M:DG.DeExtensions.ColorExtensions.SetAlpha(UnityEngine.Color,System.Single)">
            <summary>
            Changes the alpha of this color and returns it
            </summary>
        </member>
        <member name="M:DG.DeExtensions.ComponentExtensions.GetOnlyComponentsInChildren``1(UnityEngine.MonoBehaviour,System.Boolean)">
            <summary>
            Returns ONLY the Components in the children, and ignores the parent.
            </summary>
            <param name="includeInactive">If TRUE also includes inactive children</param>
        </member>
        <member name="M:DG.DeExtensions.ComponentExtensions.GetOnlyComponentInChildren``1(UnityEngine.MonoBehaviour,System.Boolean)">
            <summary>
            Returns the Component only if it's in a child, and ignores the parent.
            </summary>
            <param name="includeInactive">If TRUE also searches inactive children</param>
        </member>
        <member name="M:DG.DeExtensions.GameObjectExtensions.AwakeAndDeactivate(UnityEngine.GameObject)">
            <summary>
            Activates then immediately deactivates the target gameObject.
            Useful when wanting to call Awake before deactivating a gameObject.
            </summary>
            <param name="go"></param>
        </member>
        <member name="M:DG.DeExtensions.GameObjectExtensions.IsChildOfComponent``1(UnityEngine.GameObject)">
            <summary>Returns TRUE if the gameObject is a child of an object with the given Component</summary>
        </member>
        <member name="M:DG.DeExtensions.GameObjectExtensions.HasOrIsChildOfComponent``1(UnityEngine.GameObject)">
            <summary>Returns TRUE if the gameObject has or is a child of an object with the given Component</summary>
        </member>
        <member name="M:DG.DeExtensions.GameObjectExtensions.IsChildOfTag(UnityEngine.GameObject,System.String)">
            <summary>Returns TRUE if the gameObject is a child of the given tag</summary>
        </member>
        <member name="M:DG.DeExtensions.GameObjectExtensions.HasOrIsChildOfTag(UnityEngine.GameObject,System.String)">
            <summary>Returns TRUE if the gameObject has or is a child of the given tag</summary>
        </member>
        <member name="T:DG.DeExtensions.ListExtensions">
            <summary>
            List, IList, Array and Dictionary utils
            </summary>
        </member>
        <member name="M:DG.DeExtensions.ListExtensions.Shift``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Shifts an item from an index to another, without modifying the list except than by moving elements around
            </summary>
        </member>
        <member name="M:DG.DeExtensions.ListExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles the list
            </summary>
        </member>
        <member name="M:DG.DeExtensions.ListExtensions.AddAndReturnValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Adds a key/value pair to the dictionary and returns its value
            </summary>
        </member>
        <member name="M:DG.DeExtensions.NumberExtensions.IsWithinRange(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Returns TRUE if the int is within the given range.</summary>
            <param name="min">Min</param>
            <param name="max">Max</param>
            <param name="inclusive">If TRUE min/max range values will be valid, otherwise not</param>
            <returns></returns>
        </member>
        <member name="M:DG.DeExtensions.RectExtensions.Add(UnityEngine.Rect,UnityEngine.Rect)">
            <summary>
            Adds one rect into another, and returns the resulting a
            </summary>
        </member>
        <member name="M:DG.DeExtensions.RectExtensions.Expand(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a copy or the Rect expanded around its center by the given amount
            </summary>
            <param name="amount">Indicates how much to expand the rect on each size</param>
        </member>
        <member name="M:DG.DeExtensions.RectExtensions.Contract(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a copy or the Rect contracted around its center by the given amount
            </summary>
            <param name="amount">Indicates how much to contract the rect on each size</param>
        </member>
        <member name="M:DG.DeExtensions.RectExtensions.Fit(UnityEngine.Rect,System.Single,System.Single,System.Boolean)">
            <summary>
            Returns a copy of the Rect resized so it fits proportionally within the given size limits
            </summary>
            <param name="w">Width to fit</param>
            <param name="h">Height to fit</param>
            <param name="shrinkOnly">If TRUE (default) only shrinks the rect if needed, if FALSE also enlarges it to fit</param>
            <returns></returns>
        </member>
        <member name="M:DG.DeExtensions.RectExtensions.Includes(UnityEngine.Rect,UnityEngine.Rect,System.Boolean)">
            <summary>
            Returns TRUE if the first rect includes the second one
            </summary>
            <param name="full">If TRUE, returns TRUE only if the second rect is fully included,
            otherwise just if some part of it is included</param>
        </member>
        <member name="M:DG.DeExtensions.RectExtensions.ResetXY(UnityEngine.Rect)">
            <summary>
            Returns a copy of the Rect with its X/Y coordinates set to 0
            </summary>
        </member>
        <member name="M:DG.DeExtensions.RectExtensions.Shift(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a copy of the Rect with its values shifted according the the given parameters
            </summary>
        </member>
        <member name="M:DG.DeExtensions.RectExtensions.SetX(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a copy of the Rect with its X property set to the given value
            </summary>
        </member>
        <member name="M:DG.DeExtensions.RectExtensions.SetY(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a copy of the Rect with its Y property set to the given value
            </summary>
        </member>
        <member name="M:DG.DeExtensions.RectExtensions.SetHeight(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a copy of the Rect with its height property set to the given value
            </summary>
        </member>
        <member name="M:DG.DeExtensions.RectExtensions.SetWidth(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a copy of the Rect with its width property set to the given value
            </summary>
        </member>
        <member name="M:DG.DeExtensions.StringExtensions.IsNullOrEmpty(System.String,System.Boolean)">
            <summary>
            Returns TRUE if the string is null or empty
            </summary>
            <param name="trimSpaces">If TRUE (default) and the string contains only spaces, considers it empty</param>
        </member>
        <member name="M:DG.DeExtensions.StringExtensions.HexToColor(System.String)">
            <summary>
            Converts a HEX color to a Unity Color and returns it
            </summary>
            <param name="hex">The HEX color, either with or without the initial # (accepts both regular and short format)</param>
        </member>
        <member name="M:DG.DeExtensions.StringExtensions.ToEnum``1(System.String,System.Nullable{``0})">
            <summary>
            Converts the string to the given enum value.
            Throws an exception if the string can't be converted.
            If the enum value can't be found, returns the 0 indexed value.<para/>
            NOTE: doesn't use try/catch (TryParse) since on some platforms that won't work.
            </summary>
        </member>
        <member name="M:DG.DeExtensions.VectorExtensions.Round(UnityEngine.Vector2)">
            <summary>
            Returns a copy of the vector with its values rounded to integers, using Mathf.Round.
            </summary>
        </member>
        <member name="M:DG.DeExtensions.VectorExtensions.Floor(UnityEngine.Vector2)">
            <summary>
            Returns a copy of the vector with its values rounded to integers, using a fast int cast.
            </summary>
        </member>
    </members>
</doc>
